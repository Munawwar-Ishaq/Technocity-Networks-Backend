{
    "sourceFile": "Controllers/EditUserController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733031593177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733031593177,
            "name": "Commit-0",
            "content": "const AdminModel = require(\"../Models/AdminModel\");\r\nconst PaymentModel = require(\"../Models/PaymentModel\");\r\nconst UserModel = require(\"../Models/UserModel\");\r\nconst UserStatmentModel = require(\"../Models/UserStatmentModel\");\r\n\r\nconst Controller = async (req, res) => {\r\n  let userID = req.headers[\"userID\"];\r\n\r\n  let find = await AdminModel.findById(userID);\r\n\r\n  if (!find) {\r\n    return res.status(401).json({ error: \"Invalid token.\" });\r\n  }\r\n\r\n  if (find.role !== \"admin\") {\r\n    return res\r\n      .status(403)\r\n      .json({ error: \"You are not authorized to perform this action.\" });\r\n  }\r\n\r\n  let { data, editedStatement } = req.body;\r\n\r\n  if (!data.connectionType) {\r\n    let foundUserData = await UserModel.findOne({ userId: data.userId }).select(\r\n      \"staticIPAmmount lastMonthDue packageRate\"\r\n    );\r\n    console.log(\"Found Data\", foundUserData);\r\n\r\n    data = {\r\n      amountPaid: data.amountPaid,\r\n      staticIPAmmount: foundUserData.staticIPAmmount,\r\n      lastMonthDue: foundUserData.lastMonthDue,\r\n      packageRate: foundUserData.packageRate,\r\n    };\r\n  }\r\n\r\n  let statements = editedStatement.statements;\r\n\r\n  let balanced = editedStatement.balancedAmount;\r\n  let totalSale = editedStatement.totalSaleAmount;\r\n  let advanceBalanced = editedStatement.advanceBalancedAmount;\r\n\r\n  if (!data || !statements || !Array.isArray(statements)) {\r\n    return res.status(400).json({ error: \"Invalid data or statements.\" });\r\n  }\r\n\r\n  let userdataid = req.body.data.userId;\r\n\r\n  let findUserDataWithUserID = await UserModel.findOne({ userId: userdataid });\r\n\r\n  if (!findUserDataWithUserID) {\r\n    return res.status(404).json({ error: \"User not found.\" });\r\n  }\r\n\r\n  const currentDate = new Date();\r\n  const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1); \r\n  const startOfNextMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1); \r\n  \r\n  let statementHistory = await UserStatmentModel.findOne({\r\n    userID: findUserDataWithUserID._id.toString(),\r\n    createdAt: {\r\n      $gte: startOfMonth, \r\n      $lt: startOfNextMonth, \r\n    },\r\n  });\r\n\r\n  if (!statementHistory) {\r\n    let totalAmmount =\r\n      Number(findUserDataWithUserID.packageRate) +\r\n      Number(findUserDataWithUserID.lastMonthDue);\r\n\r\n    if (findUserDataWithUserID.staticIP) {\r\n      totalAmmount += Number(findUserDataWithUserID.staticIPAmmount);\r\n    }\r\n\r\n    statementHistory = new UserStatmentModel({\r\n      userID: findUserDataWithUserID._id.toString(),\r\n      statementHistory: [],\r\n      active: findUserDataWithUserID.active,\r\n      totalAmmount: totalAmmount,\r\n    });\r\n  }\r\n\r\n  if (statements.length > 0) {\r\n    statementHistory.statementHistory =\r\n      statementHistory.statementHistory.concat(statements);\r\n    statements.map((obj) => {\r\n      if (obj.type === \"userStatus\") {\r\n        statementHistory.active = obj.newStatus;\r\n      } else {\r\n        statementHistory.totalAmmount = obj.newTotalAmmount;\r\n      }\r\n    });\r\n  }\r\n\r\n  try {\r\n    let userData = await UserModel.findOneAndUpdate(\r\n      { _id: findUserDataWithUserID._id.toString() },\r\n      { $set: { ...data } },\r\n      { new: true, runValidators: true }\r\n    );\r\n\r\n    await statementHistory.save();\r\n\r\n    let paymentReport = await PaymentModel.findOneAndUpdate(\r\n      { type: \"PaymentReport\" },\r\n      {\r\n        $inc: {\r\n          totalBalanced: balanced,\r\n          totaSale: totalSale,\r\n          advanceBalanced: advanceBalanced,\r\n        },\r\n      },\r\n      {\r\n        new: true,\r\n        upsert: true,\r\n      }\r\n    );\r\n\r\n    res.status(200).json({\r\n      success: \"User Updated successfully.\",\r\n      data: userData,\r\n      paymentReport,\r\n    });\r\n  } catch (err) {\r\n    console.log(\"Error updating user data : \", err);\r\n    return res.status(500).json({ error: \"Failed to update user data.\" });\r\n  }\r\n};\r\n\r\nmodule.exports = Controller;\r\n"
        }
    ]
}